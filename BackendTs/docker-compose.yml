version: '3.8' # Cảnh báo "version is obsolete" vẫn sẽ hiện, bạn có thể xóa dòng này nếu muốn sử dụng cú pháp mới nhất của Compose Specification.
services:
  mysql:
    image: mysql:8.0
    container_name: mysql-sti
    environment:
      MYSQL_ROOT_PASSWORD: sti@1234
      MYSQL_DATABASE: sti_mes_2025_dev
      MYSQL_USER: sti
      MYSQL_PASSWORD: sti@1234
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    networks:
      - app-network

  mongodb:
    image: mongo:latest
    container_name: myts-mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      TZ: Asia/Ho_Chi_Minh
    networks:
      - app-network
    healthcheck:
      # Lệnh này kiểm tra xem MongoDB có phản hồi lệnh 'ping' hay không
      test: ["CMD", "sh", "-c", "echo 'db.runCommand(\"ping\").ok' | mongosh mongodb:27017/iot_gateway --quiet"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  dbgate:
    image: dbgate/dbgate:latest
    container_name: myts-dbgate
    ports:
      - "3001:3000"
    environment:
      DG_AUTH_ENABLED: "false"
    networks:
      - app-network
    depends_on:
      mongodb:
        condition: service_healthy

  emqx:
    build:
      context: . # Đường dẫn đến thư mục chứa Dockerfile.emqx
      dockerfile: Dockerfile.emqx # Tên Dockerfile của bạn
    container_name: emqx_node
    ports:
      # Ánh xạ tất cả các cổng MQTT và Dashboard ra host
      - "1883:1883"      # MQTT port
      - "8083:8083"      # MQTT over WebSocket
      - "8084:8084"      # MQTT over SSL/TLS
      - "8883:8883"      # MQTT over SSL/TLS
      - "18083:18083"    # Dashboard/Management API
    volumes:
      # Đảm bảo các volumes này được giữ lại để lưu trữ dữ liệu EMQX
      - emqx_data:/opt/emqx/data
      - emqx_etc:/opt/emqx/etc
      - emqx_log:/opt/emqx/log
    environment:
      # Đảm bảo các biến môi trường này được truyền vào EMQX
      EMQX_NAME: emqx
      EMQX_HOST: emqx_node
      TZ: Asia/Ho_Chi_Minh
    networks:
      - app-network # Đảm bảo EMQX nằm trên mạng ứng dụng
    restart: always
    healthcheck:
      # Kiểm tra API Dashboard của EMQX. Sử dụng 2>&1 để thấy lỗi chi tiết nếu có.
      test: [ "CMD-SHELL", "curl http://localhost:18083/api/v5/brokers 2>&1 || exit 1" ]
      interval: 10s
      timeout: 10s
      retries: 10
      # Tăng start_period để EMQX có đủ thời gian khởi động hoàn toàn trước khi Docker đánh giá healthcheck
      start_period: 120s

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin-sti
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
    ports:
      - "8081:80"
    networks:
      - app-network
    depends_on:
      - mysql
    restart: always

  backend:
    build:
      context: .
      dockerfile: Dockerfile # Trỏ đến Dockerfile của backend (đã có wait-for-it.sh và bash/netcat)
    container_name: myts-backend
    ports:
      - "${PORT}:${PORT}"
    volumes:
      - .:/app
      - /app/node_modules
    networks:
      - app-network
    depends_on:
      mysql:
        condition: service_started # wait-for-it.sh sẽ chờ MySQL sẵn sàng
      mongodb:
        condition: service_healthy # MongoDB đã có healthcheck tốt
      emqx:
        condition: service_started # wait-for-it.sh sẽ chờ EMQX sẵn sàng
    restart: always

networks:
  app-network:
    driver: bridge

volumes:
  mongodb_data:
  mysql_data:
  emqx_data:
  emqx_etc:
  emqx_log: